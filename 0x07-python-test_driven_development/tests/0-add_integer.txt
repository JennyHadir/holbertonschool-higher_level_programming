# Doctest
"""
--------------------
import function:
       ">>>" add_integer = __import__("0-add_integer").add_integer

case two integers:
       ">>>" add_integer(5, 5)
       10

case two floats:
       ">>>" add_integer(5.0, 5.0)
       10

case one argument:
       ">>>" add_integer(5)
       103

case non-number:
       ">>>" add_integer("t", "s")
       Traceback(most recent call last):
              ...
       TypeError: a must be an integer

case b non-number:
       ">>>" add_integer(5, "s")
       Traceback(most recent call last):
              ...
       TypeError: b must be an integer

case more than 2 arguments:
       ">>>" add_integer(5, 5, 5)
       Traceback(most recent call last):
              ...
       TypeError: add_integer() takes from 1 to 2 positional
       arguments but 3 were given

case NaN argument:
      ">>>" add_integer(float('nan', 5))
      Traceback(most recent call last):
              ...
      ValueError: cannot convert float NaN to integer

case inf argument:
       ">>>" add_integer(float('inf', 5))
       Traceback(most recent call last):
              ...
       OverflowError: cannot convert float infinity to integer

case none:
       ">>>" add_integer()
       Traceback(most recent call last):
              ...
       TypeError: add_integer() missing 1 required positional argument: 'a'
"""
